# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import vision_pb2 as vision__pb2


class VisionServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.FaceCollection = channel.unary_unary(
                '/vision.VisionService/FaceCollection',
                request_serializer=vision__pb2.FaceCollectionRequest.SerializeToString,
                response_deserializer=vision__pb2.CommonResopnse.FromString,
                )
        self.RemoveUrl = channel.unary_unary(
                '/vision.VisionService/RemoveUrl',
                request_serializer=vision__pb2.RemoveUrlRequest.SerializeToString,
                response_deserializer=vision__pb2.CommonResopnse.FromString,
                )
        self.StartVisonService = channel.unary_unary(
                '/vision.VisionService/StartVisonService',
                request_serializer=vision__pb2.StartVisonServiceRequest.SerializeToString,
                response_deserializer=vision__pb2.CommonResopnse.FromString,
                )


class VisionServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def FaceCollection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RemoveUrl(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StartVisonService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_VisionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'FaceCollection': grpc.unary_unary_rpc_method_handler(
                    servicer.FaceCollection,
                    request_deserializer=vision__pb2.FaceCollectionRequest.FromString,
                    response_serializer=vision__pb2.CommonResopnse.SerializeToString,
            ),
            'RemoveUrl': grpc.unary_unary_rpc_method_handler(
                    servicer.RemoveUrl,
                    request_deserializer=vision__pb2.RemoveUrlRequest.FromString,
                    response_serializer=vision__pb2.CommonResopnse.SerializeToString,
            ),
            'StartVisonService': grpc.unary_unary_rpc_method_handler(
                    servicer.StartVisonService,
                    request_deserializer=vision__pb2.StartVisonServiceRequest.FromString,
                    response_serializer=vision__pb2.CommonResopnse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'vision.VisionService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class VisionService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def FaceCollection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionService/FaceCollection',
            vision__pb2.FaceCollectionRequest.SerializeToString,
            vision__pb2.CommonResopnse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RemoveUrl(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionService/RemoveUrl',
            vision__pb2.RemoveUrlRequest.SerializeToString,
            vision__pb2.CommonResopnse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StartVisonService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/vision.VisionService/StartVisonService',
            vision__pb2.StartVisonServiceRequest.SerializeToString,
            vision__pb2.CommonResopnse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
